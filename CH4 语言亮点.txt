编程范式
    PHP 是一种支持多种编程技术的灵活的，动态的语言。多年来，它发生了显著的变化，特别是在 PHP 5.0（2004） 中添加了一个可靠的面向对象模型，
    在 PHP 5.3 （2009）中添加了匿名函数和命名空间，在 PHP 5.4（2012）中添加了特性。

    面向对象编程
        PHP 有一套非常完整的面向对象编程特性，包括对类，抽象类，接口，继承，构造方法，克隆和异常等的支持。

        了解 PHP 的面向对象
        了解 特性

    函数式编程
        PHP 支持一级函数，这意味着一个函数被赋值给一个变量。用户定义函数和内置函数都可以由变量引用和动态的调用。函数可以当作参数传递给其他函
        数（一种叫做高阶函数的特性）并且函数可以返回其他函数。

        递归，一种允许函数调用自身的特性，被 PHP 语言支持，但大多数 PHP 代码聚焦于迭代。

        自 PHP 5.3（2009）以来，出现了新的匿名函数（带有对闭包的支持）。

        PHP 5.4 添加了将闭包绑定到对象作用域的能力并且改进了对 callable 的支持，这样 callable 就可以在几乎所有情况下与匿名函数互换使用。

        继续阅读 PHP 中的函数式编程
        了解匿名函数
        了解 Closure 类
        闭包 RFC 中的更多细节
        了解 Callable
        了解使用 call_user_func_array() 动态的调用函数

    元编程


命名空间
    如上面提到的，PHP 社区有大量的开发者正在创建大量的代码。这意味着一个库的 PHP 代码可能使用与另一个库使用相同的类名。当两个库被用在相同的
    命名空间中时，它们会冲突并且引发问题。

    命名空间解决了这个问题。正如 PHP 参考手册中描述的那样，命名空间可以与操作系统中命名空间文件所在的目录相比较；两个具有相同名称的文件可以
    同时存在于不同的目录中。同样，两个具有相同名称的 PHP 类可以同时存在于不同的 PHP 命名空间中。就是这么简单。

    对你来说，为代码声明命名空间非常重要，这样它就可以被其他开发人员使用，而不必担心与其他的库发生冲突。

    PSR-4 中概述了一种使用命名空间的推荐方式，它旨在提供一种标准的文件、类和命名空间惯例，以允许即插即用代码。

    在 2014 年 10 月，PHP-FIG 废弃了之前的自动加载规范：PSR-0。PSR-0 和 PSR-4 仍然是完全可用的。后者需要 PHP 5.3，因此许多只使用 PHP
    5.2 的项目实现了PSR-0 。

    如果你打算为一个新的应用程序或者包使用一个自动加载规范，请查看 PSR-4 。

    阅读 命名空间
    阅读 PSR-0
    阅读 PSR-4

标准 PHP 库
    标准 PHP 库（Standard PHP Library，SPL）使用 PHP 打包的并且提供了一组类和接口。它主要由通常需要的数据结构类（栈、队列、堆等）和那些
    能够遍历 这些数据结构或你自己实现了 SPL 接口的类 的遍历器 组成。

    阅读 SPL
    Lynda.com 上的 SPL 视频课程（付费的）

命令行接口
    PHP 是为编写 web 应用程序而被创造的，但是对脚本化的命令行接口（CLI）程序也很有用。CLI PHP 程序有助于自动化常见的任务，比如测试、部署
    和应用管理。

    CLI PHP 程序非常强大，因为你能够直接使用应用程序的代码，而不必为其创建和保护一个 web GUI 。只要确保不要将你的 CLI PHP 脚本放到你的公
    开的 web 根目录中!

    尝试从你的命令行中运行 PHP：
        > php -i

    -i 选项将会向 phpinfo() 函数那样打印你的 PHP 配置。

    -a 选项提供一个交互式 shell，类似 ruby 的 IRB 或者 python 的交互式 shell。还有许多其他有用的 命令行选项 。

    让我们写一个简单的“Hello, $name” CLI 程序。为了尝试它，创建一个名为 hello.php 的文件，内容如下。
        <?php
        if ($argc !== 2) {
            echo "Usage: php hello.php <name>.\n";
            exit(1);
        }
        $name = $argv[1];
        echo "Hello, $name\n";

    PHP 会根据运行脚本时带的参数设置两个特殊的变量。$argc 是一个包含了参数数量的整型变量并且 $argv 是一个包含了每个参数的值的数组变量。第
    一个参数总是有的 PHP 脚本文件的名称，在本例中，即 hello.php 。

    和一个非零数字一起使用的 exit() 表达式会让 shell 知道命令失败了。常用的退出码可以在 这里 找到。

    为了运行我们上面的那个脚本，从命令行：
        > php hello.php
        Usage: php hello.php <name>
        > php hello.php world
        Hello, world

    了解如何从命令行运行 PHP 。

Xdebug
    软件开发中最有用的工具之一是一个适当的调试器。它允许你跟踪代码的执行并且监视堆栈的内容。Xdebug，PHP 的调试器，可以被各种 IDE 利用去提
    供断点和堆栈检查。它还允许诸如 PHPUnit 和 KCacheGrind 等工具去执行代码覆盖率分析和代码分析。

    如果你发现自己陷入了一种困境，太乐意求助于 var_dump()/print_r()，而且你始终找不到解决方法 —— 你可能需要使用调试器了。

    安装 Xdebug 可能比较棘手，但是它最重要的特性之一是“远程调试” —— 如果你在本地开发代码而且然后在一个虚拟机中或者在另一台服务器上测试它，
    远程调试会是那个你想要立即启用的特性。

    传统上，你将使用这些值修改你的 Apache 的 VHost 或 .htaccess 文件：
        php_value xdebug.remote_host 192.168.?.?
        php_value xdebug.remote_port 9000

    “远程主机”和“远程端口”将对应上你的本地计算机和你配置 IDE 去监听的端口。然后只需将 IDE 置于“监听连接”模式，并加载这个 URL ：
        http://your-website.example.com/index.php?XDEBUG_SESSION_START=1

    现在你的 IDE 将在脚本执行时截获当前的状态，允许你设置断点并探测内存中的值。

    图形化调试器使单步调试、检查变量和根据实时的运行时 eval 代码变得非常容易。许多 IDE 都内置的或基于插件的支持了 Xdebug 的图形化调试。
    MacGDBp 是针对 Mac 的一个免费的、开源的、单机的 Xdebug GUI 。

    了解关于 Xdebug 的更多信息
    了解关于 MacGDBp 的更多信息
