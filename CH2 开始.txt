使用当前的稳定版本（7.4）
    如果你刚开始接触 PHP ，请从当前的稳定版本 PHP 7.4 开始。PHP 7.x 在旧的 5.x 版本之上添加了许多 新的特性 。引擎已被大量的重写，PHP
    现在甚至比旧的版本更快。

    你应该尽快尝试升级到最新的稳定版本 —— PHP 5.6 已经 生命终止 。升级是容易的，因为没有很多 向后兼容性中断 。如果你不确定一个函数或特性
    属于哪个版本，你可以到 php.net 网站上去查看 PHP 的文档。

内置的 Web 服务器
    使用 PHP 5.4 或更新版本，你无需安装和配置一个功能齐全的 web 服务器就可以开始学习 PHP 。为了启动这个服务器，从位于你的项目的 web 根
    目录的终端中运行下面的命令：
        > php -S localhost:8000

    学习内置的命令行 web 服务器

Mac 设置
    macOS 预打包了 PHP，但它通常比最新的稳定版本稍微落后一些。有多种方法可以把最新的 PHP 版本安装到 macOS 上。

    通过 Homebrew 安装 PHP
        Homebrew 是 macOS 的一个可以帮助你轻松安装 PHP 和各种扩展的包管理器。Homebrew 的核心仓库为 PHP 5.6、7.0、7.1、7.2、7.3
        和 7.4 提供了“公式”。通过这个命令安装最新的版本：
            brew install php@7.4

        通过修改 PATH 变量，你可以在 Homebrew 的 PHP 版本之间进行切换。或者，你可以使用 brew-php-switcher 去自动的切换 PHP 版本。

    通过 Macports 安装 PHP
        MacPorts 是一个开源的社区项目，倡议去设计一个易于使用的系统，用于在 OS X 操作系统上编译、安装和升级命令行、X11 或基于 Aqua 的
        开源软件。

        MacPorts 支持预编译的二进制文件，因此不需要从源 tarball 文件重新编译每个依赖。如果你的系统上还没有安装任何包，那么它可以拯救的
        生命。

        此刻，你能使用 port install 命令安装 php54， php55， php56， php70， php71， php72， php73 或者 php74，例如：
            sudo port install php56
            sudo port install php74

        并且你可以运行 select 命令去切换激活的 PHP ：
            sudo port select --set php php74

    通过 phpbrew 安装 PHP
        phpbrew 是一个用于安装和管理多个 PHP 版本的工具。如果两个不同的应用程序/项目需要不同版本的 PHP，而你又不使用虚拟机，那么这就非
        常的有用了。

    通过 Liip 的二进制安装程序安装 PHP
        另外一个流行的选项是 php-osx.liip.ch ，它为从 5.3 到 7.3 的版本提供了一种轮流的安装方法。它不会覆盖苹果安装的 PHP 二进制文件
        ，而是将所有文件安装在一个单独的位置（/usr/local/php5）。

    从源代码编译
        另一种可以控制安装的 PHP 版本的选项是 自己编译它 。在该情况下，一定要确保已安装 Xcode 或者从苹果的 Mac 开发者中心下载的苹果的替
        代品“Xcode的命令行工具”。

    多合一安装程序
        上面列出的解决方案主要处理 PHP 自身，并且不会提供诸如 Apache、Nginx 或 SQL 服务器的东西。诸如 MAMP 和 XAMPP 的“多合一”解决
        方案将为你安装这些其他的软件并将它们全部绑在一起，而且安装的简单性还伴随着灵活性的权衡。

Windows 设置
    你能够从 windows.php.net/download 下载二进制程序。在提取 PHP 之后，建议将 PATH 设置为你的 PHP 文件夹（php.exe 所在的位置）的
    根目录，以便你可以在任何地方执行 PHP 。对于学习和本地开发，你可以使用 PHP 5.4+ 自带的内置服务器，从而你不需要担心如何配置它。如果你
    想要一个包含了成熟的 web 服务器以及 MySQL 的“多合一”，那么诸如 Web Platform Installer，XAMPP，EasyPHP，OpenServer 和 WAMP
    的工具将有助于获得一个 Windows 开发环境并且快速的运行起来。那就是说，这些工具将会和生产上有一些不同，因此如果你在 Windows 上工作并且
    会部署到 Linux ，那么要注意环境的不同。

    如果你需要在 Windows 上运行你的生产系统，那么 IIS7 将会给你最好的稳定性和最佳的性能。你可以使用 phpmanager （一个 IIS7 的 GUI 插
    件）去简化 PHP 的配置和管理。IIS7 内置的自带了 FastCGI 并且随时可以使用，你只需将 PHP 配置为一个处理程序。对于支持和额外的资源，在
    iis.net 上有一个 PHP 专门的区域。

    通常，在开发和生产上使用不同的环境运行你的应用程序可能会导致在运行时出现奇怪的 bug 。如果你在 Windows 上开发并且部署到 Linux （或任
    何非 Windows 上），那么你应该考虑使用一个 虚拟机 。

    Chris Tankersley 有一篇非常有用的博客文章，介绍了他使用什么工具来使用 Windows 进行 PHP 开发。

常见的目录结构
    对于那些刚开始为 web 编写程序的人来说，一个常见的问题是“我该把东西放哪儿?”。多年来，这个答案一直是“DocumentRoot所在的位置”。虽然这
    个答案是不完整的，但它是一个很好的起点。

    出于安全原因，配置文件不应该被网站的访客访问；因此，公开的脚本被保存在公开的目录中，并且私有的配置和数据被保存在该目录之外。

    对于一个人所工作于的每一个团队、CMS或者框架，这些实体中的每一个都使用某个标准的目录结构。然而，如果一个人独自开始一个项目，知道要使用哪
    个文件系统结构可能会令人生畏。

    Paul M. Jones 对 PHP 领域中成千上万的 github 项目的常见实践做了一些非常棒的调查。基于这份调查，他编制了一份标准的文件和目录结构，
    即 标准的 PHP 包框架 。在这份目录结构中，DocumentRoot 应该指向 public/ ，单元测试应该位于 tests/ 目录中，并且第三方的库，比如通
    过 Composer 安装的，属于 vendor/ 目录。对于其他的文件和目录，遵循 标准的 PHP 包框架 对于一个项目的贡献者们最有意义。
