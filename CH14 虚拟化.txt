在开发和生产中以不同的环境运行你的应用程序，可能会导致在运行时出现奇怪的 bug 。而且当你和一组开发人员一起开发时，将所有的库都保持到相同的版
本也是很棘手的。

如果你在 Windows 上开发并且部署到 Linux （或者任何非 Windows ）或者在一个组中开发， 你应该考虑使用一个虚拟机。这听起来很棘手，但除了众
所周知的虚拟化环境如 VMware 或 VirtualBox 之外，还有一些额外的工具可以通过几个简单的步骤来帮助你设置一个虚拟环境。

Vagrant
    Vagrant 帮助你在已知的虚拟环境上构建你的虚拟盒子并且会基于一个配置文件配置这些环境。这些盒子可以被自动的设置，你也可以使用“供应”软件，
    例如 Puppet 或 Chef 为你完成此任务。提供基础的盒子是确保以相同的方式设置多个盒子的一种好方法并且你不再需要维护复杂的“设置”命令列表。
    无需很多手动的步骤，你就可以“销毁”你的基础的盒子并重新创建它，使它很容易的创建一个“新鲜”的安装。

    Vagrant 创建了用于在主机和虚拟机之间共享代码的文件夹，这意味着你能够在你的主机上创建和编辑你的文件而且紧接着在你的虚拟机中运行该代码。

    一点帮助
        如果你需要一点帮助去开始使用 Vagrant ，那么有一些可能有用的服务：
            Rove：允许你预生成典型的 Vagrant 构建、PHP 等选项的服务。配置是由 Chef 提供的。
            Puphpet：为 PHP 开发设置虚拟机的简单的 GUI。重点关注 PHP 。除了本地的 VMs ，它也能被用于去部署到云服务。配置是由 Puppet
            提供的。
            Protobox：是 Vagrant 之上的一个层和一个为 web 开发设置虚拟机的 web GUI。一份简单的 YAML 文档控制了安装在虚拟机之上所有
            事物。
            Phansible：提供一个易于使用的界面，它帮助你为那些基于 PHP 的项目生成 Ansible playbook。
